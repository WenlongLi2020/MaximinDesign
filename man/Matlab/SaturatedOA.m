function [OA]= SaturatedOA(s,k)
% SaturatedOA is to generate saturated OA(N,s^n,s,2) with N=s^k and
% n=(N-1)/(s-1), whose columns are arranged in Yates order.

% The saturated orthogonal array is generated by k independent columns e_1, \dots, e_k, and it collects these k independent columns and  all their possible interaction columns.
% The columns of S can be represented by e_1 ^{u_1} \cdots e_k ^{u_k} with the first nonzero entry u_j in the vector (u_1,\dots, u_k)
% being equal to one. Here t=k.

% For example, s=3; k=2; % Work in GF(p^m).
f=factor(s);
p=f(1,1);
m=sum(f>0);
N=s^k;
F = gftuple([-1:p^m-2]',m,p); % Construct list of elements.
G=[-Inf 0:p^m-2]; % elements in G
%table=ones(p^m,1)*G;
G0=G(2:end);
I=ones(k,k)*G(1); % I: indentity matrix in a GF(p^m)
for i=1:k
        I(i,i)=G(2);
end
FF = fullfact(repmat(s,1,k));
%Form an s^t x t array whose rows are all possible t-tuples from GF(s)
A=[];
for i=1:N
 temp=gfmul( G(FF(i,:))'*ones(1,k),I,F);
 A(i,:)=rowsum(temp, F);
end

% Yates order, which corresponds to
% 1,2,12,3,13,23,4,14,24,124,34,134,234,1234; see Tang (2001, Biometrika)
Yate=fullfact(repmat(2,1,k))-1; 
Y=Yate(2:end,:); % Y: Yates order  

D=zeros(N, (N-1)/(s-1));
BasicCol=1;
nt=1;
for i=1:size(Y,1)
    r=Y(i,:);  % i takes ith row of Y, Yates order, corresponds to a factor
    if sum(r)==1
         D(:,nt)=A(:,BasicCol); % collect all main factors
        BasicCol=BasicCol+1;
        nt=nt+1;
    else 
        c=[ones((s-1)^(sum(r)-1),1) fullfact( repmat(s-1,1,sum(r)-1) )];
        % obtain factor, e.g., convert [1 1 0] to [1 2] 
        temp=(1:k).*r;
        factor_lab=temp(temp>0);
        S=A(:,factor_lab);
        
    for j=1:size(c,1)
      temp=gfmul(ones(N,1)*G0(c(j,:)),S,F);% G0: G with entry O
      D(:,nt)=colsum(temp, F); % collect all main factors and interactions
      nt=nt+1;
    end  
    end 
end

OA=[];
for i=1:p^m
    [x y]=find(D==G(i));
    temp=size(x,1);
    for j=1:temp
        OA(x(j),y(j))=i-1;
    end
end  
end


function [rows]= rowsum(T, F) % T: A temp matrix
rows=T(1,:);
for i=2:size(T,1)
    rows=gfadd(rows,T(i,:),F);
end
end


function [cols]= colsum(T, F) % T: A temp matrix
cols=T(:,1);
for j=2:size(T,2)
    cols=gfadd(cols,T(:,j),F);
end
end
